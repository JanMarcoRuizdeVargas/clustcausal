# A sample yaml with all possible configs
# Config settings: n_nodes, n_edges, dag_method, n_clusters, weight_range, lin_distribution_type, 
#                 nonlin_distribution_type, scm_method, sample_size, seed, node_names, noise_scale

# Should always be only one, will be popped away in ExperimentRunner
discovery_alg : ['ClusterPC']

# Runs per unique configuration - how often each configuration gets simulated
runs_per_configuration: 1

# any integer between 2 and 50
n_nodes: [10, 20, 30, 40, 50]

# will not be exactly graph edges due to gcastle dag generator, might be less edges
n_edges: [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]

# For more information see gcastle documentation
dag_method: ['erdos_renyi', 'scale_free', 'hierarchical']

n_clusters: [1,2,3,4,5,6,7]

weight_range: 
  - [-1,2]

# For more information see gcastle documentation
lin_distribution_type: ['gauss', 'exp', 'gumbel']

# For more information see gcastle documentation
nonlin_distribution_type: ['mlp', 'mim', 'gp']

# Never change this line, it is for coding logic
scm_method: ['linear', 'nonlinear'] 

sample_size: [1000]

seed: [null]

node_names: [null]

noise_scale: [1]

alpha: [0.01, 0.05, 0.1, 0.25, 0.5]
# SID is very expensive to compute on large graphs
sid: ['true']

# For more information see causallearn documentation
indep_test: ["fisherz", "chisq", "gsq", "kci"]

# Whether C-DAG or DAG is generated first, options: ['cdag', 'dag']
# cdag leads to sparser clusters and even sparser graphs, dag leads to pretty dense C-DAGs
cluster_method: ['cdag', 'dag']